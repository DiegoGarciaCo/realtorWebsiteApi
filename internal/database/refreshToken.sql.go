// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: refreshToken.sql

package database

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const deletecsfToken = `-- name: DeletecsfToken :exec
DELETE FROM csft WHERE token = $1
`

func (q *Queries) DeletecsfToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, deletecsfToken, token)
	return err
}

const getCsfToken = `-- name: GetCsfToken :one
SELECT token, user_id, created_at FROM csft WHERE token = $1
`

func (q *Queries) GetCsfToken(ctx context.Context, token string) (Csft, error) {
	row := q.db.QueryRowContext(ctx, getCsfToken, token)
	var i Csft
	err := row.Scan(&i.Token, &i.UserID, &i.CreatedAt)
	return i, err
}

const getRefreshToken = `-- name: GetRefreshToken :one
SELECT token, created_at, updated_at, user_id, expires_at, revoked_at FROM refresh_tokens WHERE token = $1
`

func (q *Queries) GetRefreshToken(ctx context.Context, token string) (RefreshToken, error) {
	row := q.db.QueryRowContext(ctx, getRefreshToken, token)
	var i RefreshToken
	err := row.Scan(
		&i.Token,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.UserID,
		&i.ExpiresAt,
		&i.RevokedAt,
	)
	return i, err
}

const revokeRefreshToken = `-- name: RevokeRefreshToken :exec
UPDATE refresh_tokens SET revoked_at = now() WHERE token = $1
`

func (q *Queries) RevokeRefreshToken(ctx context.Context, token string) error {
	_, err := q.db.ExecContext(ctx, revokeRefreshToken, token)
	return err
}

const storeRefreshToken = `-- name: StoreRefreshToken :exec
INSERT INTO refresh_tokens (token, created_at, updated_at, user_id, expires_at) VALUES ($1, now(), now(), $2, $3)
`

type StoreRefreshTokenParams struct {
	Token     string
	UserID    uuid.UUID
	ExpiresAt time.Time
}

func (q *Queries) StoreRefreshToken(ctx context.Context, arg StoreRefreshTokenParams) error {
	_, err := q.db.ExecContext(ctx, storeRefreshToken, arg.Token, arg.UserID, arg.ExpiresAt)
	return err
}

const storecsfToken = `-- name: StorecsfToken :exec
INSERT INTO csft (token, created_at, user_id) VALUES ($1, now(), $2)
`

type StorecsfTokenParams struct {
	Token  string
	UserID uuid.UUID
}

func (q *Queries) StorecsfToken(ctx context.Context, arg StorecsfTokenParams) error {
	_, err := q.db.ExecContext(ctx, storecsfToken, arg.Token, arg.UserID)
	return err
}
