// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: post.sql

package database

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
	"github.com/lib/pq"
)

const createPost = `-- name: CreatePost :one
INSERT INTO posts (title, slug, content, excerpt, author, published_at, status, tags)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, title, slug, content, excerpt, status, created_at, updated_at, tags
`

type CreatePostParams struct {
	Title       string
	Slug        string
	Content     string
	Excerpt     sql.NullString
	Author      sql.NullString
	PublishedAt sql.NullTime
	Status      sql.NullString
	Tags        []string
}

type CreatePostRow struct {
	ID        uuid.UUID
	Title     string
	Slug      string
	Content   string
	Excerpt   sql.NullString
	Status    sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Tags      []string
}

func (q *Queries) CreatePost(ctx context.Context, arg CreatePostParams) (CreatePostRow, error) {
	row := q.db.QueryRowContext(ctx, createPost,
		arg.Title,
		arg.Slug,
		arg.Content,
		arg.Excerpt,
		arg.Author,
		arg.PublishedAt,
		arg.Status,
		pq.Array(arg.Tags),
	)
	var i CreatePostRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.Excerpt,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Tags),
	)
	return i, err
}

const deletePost = `-- name: DeletePost :one
DELETE FROM posts
WHERE id = $1 RETURNING id, thumbnail
`

type DeletePostRow struct {
	ID        uuid.UUID
	Thumbnail sql.NullString
}

func (q *Queries) DeletePost(ctx context.Context, id uuid.UUID) (DeletePostRow, error) {
	row := q.db.QueryRowContext(ctx, deletePost, id)
	var i DeletePostRow
	err := row.Scan(&i.ID, &i.Thumbnail)
	return i, err
}

const getPostByCategory = `-- name: GetPostByCategory :many
SELECT id, title, slug, excerpt, created_at, tags, thumbnail, published_at, author
FROM posts
WHERE status = 'published' AND tags @> $1
ORDER BY published_at DESC
`

type GetPostByCategoryRow struct {
	ID          uuid.UUID
	Title       string
	Slug        string
	Excerpt     sql.NullString
	CreatedAt   sql.NullTime
	Tags        []string
	Thumbnail   sql.NullString
	PublishedAt sql.NullTime
	Author      sql.NullString
}

func (q *Queries) GetPostByCategory(ctx context.Context, tags []string) ([]GetPostByCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, getPostByCategory, pq.Array(tags))
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetPostByCategoryRow
	for rows.Next() {
		var i GetPostByCategoryRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Excerpt,
			&i.CreatedAt,
			pq.Array(&i.Tags),
			&i.Thumbnail,
			&i.PublishedAt,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getPostBySlug = `-- name: GetPostBySlug :one
SELECT id, title, slug, content, excerpt, status, author, published_at, thumbnail, created_at, updated_at, tags
FROM posts
WHERE slug = $1
`

type GetPostBySlugRow struct {
	ID          uuid.UUID
	Title       string
	Slug        string
	Content     string
	Excerpt     sql.NullString
	Status      sql.NullString
	Author      sql.NullString
	PublishedAt sql.NullTime
	Thumbnail   sql.NullString
	CreatedAt   sql.NullTime
	UpdatedAt   sql.NullTime
	Tags        []string
}

func (q *Queries) GetPostBySlug(ctx context.Context, slug string) (GetPostBySlugRow, error) {
	row := q.db.QueryRowContext(ctx, getPostBySlug, slug)
	var i GetPostBySlugRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.Excerpt,
		&i.Status,
		&i.Author,
		&i.PublishedAt,
		&i.Thumbnail,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Tags),
	)
	return i, err
}

const getPostThumbnailById = `-- name: GetPostThumbnailById :one
SELECT id, thumbnail, created_at, updated_at
FROM posts
WHERE id = $1
`

type GetPostThumbnailByIdRow struct {
	ID        uuid.UUID
	Thumbnail sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
}

func (q *Queries) GetPostThumbnailById(ctx context.Context, id uuid.UUID) (GetPostThumbnailByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getPostThumbnailById, id)
	var i GetPostThumbnailByIdRow
	err := row.Scan(
		&i.ID,
		&i.Thumbnail,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listAllPosts = `-- name: ListAllPosts :many
SELECT id, title, slug, excerpt, content, author, published_at, thumbnail, status, created_at, tags
FROM posts
ORDER BY created_at DESC
`

type ListAllPostsRow struct {
	ID          uuid.UUID
	Title       string
	Slug        string
	Excerpt     sql.NullString
	Content     string
	Author      sql.NullString
	PublishedAt sql.NullTime
	Thumbnail   sql.NullString
	Status      sql.NullString
	CreatedAt   sql.NullTime
	Tags        []string
}

func (q *Queries) ListAllPosts(ctx context.Context) ([]ListAllPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, listAllPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListAllPostsRow
	for rows.Next() {
		var i ListAllPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Excerpt,
			&i.Content,
			&i.Author,
			&i.PublishedAt,
			&i.Thumbnail,
			&i.Status,
			&i.CreatedAt,
			pq.Array(&i.Tags),
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPublishedPosts = `-- name: ListPublishedPosts :many
SELECT id, title, slug, excerpt, content, created_at, tags, thumbnail, published_at, author
FROM posts
WHERE status = 'published'
ORDER BY created_at DESC
`

type ListPublishedPostsRow struct {
	ID          uuid.UUID
	Title       string
	Slug        string
	Excerpt     sql.NullString
	Content     string
	CreatedAt   sql.NullTime
	Tags        []string
	Thumbnail   sql.NullString
	PublishedAt sql.NullTime
	Author      sql.NullString
}

func (q *Queries) ListPublishedPosts(ctx context.Context) ([]ListPublishedPostsRow, error) {
	rows, err := q.db.QueryContext(ctx, listPublishedPosts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListPublishedPostsRow
	for rows.Next() {
		var i ListPublishedPostsRow
		if err := rows.Scan(
			&i.ID,
			&i.Title,
			&i.Slug,
			&i.Excerpt,
			&i.Content,
			&i.CreatedAt,
			pq.Array(&i.Tags),
			&i.Thumbnail,
			&i.PublishedAt,
			&i.Author,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const publishPost = `-- name: PublishPost :exec
UPDATE posts
SET status = $2, updated_at = CURRENT_TIMESTAMP, published_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type PublishPostParams struct {
	ID     uuid.UUID
	Status sql.NullString
}

func (q *Queries) PublishPost(ctx context.Context, arg PublishPostParams) error {
	_, err := q.db.ExecContext(ctx, publishPost, arg.ID, arg.Status)
	return err
}

const saveAndPublishPost = `-- name: SaveAndPublishPost :one
UPDATE posts
SET title = $2, slug = $3, content = $4, excerpt = $5, author = $6, status = $7, tags = $8, updated_at = CURRENT_TIMESTAMP, published_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, title, slug, content, excerpt, status, created_at, updated_at, tags
`

type SaveAndPublishPostParams struct {
	ID      uuid.UUID
	Title   string
	Slug    string
	Content string
	Excerpt sql.NullString
	Author  sql.NullString
	Status  sql.NullString
	Tags    []string
}

type SaveAndPublishPostRow struct {
	ID        uuid.UUID
	Title     string
	Slug      string
	Content   string
	Excerpt   sql.NullString
	Status    sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Tags      []string
}

func (q *Queries) SaveAndPublishPost(ctx context.Context, arg SaveAndPublishPostParams) (SaveAndPublishPostRow, error) {
	row := q.db.QueryRowContext(ctx, saveAndPublishPost,
		arg.ID,
		arg.Title,
		arg.Slug,
		arg.Content,
		arg.Excerpt,
		arg.Author,
		arg.Status,
		pq.Array(arg.Tags),
	)
	var i SaveAndPublishPostRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.Excerpt,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Tags),
	)
	return i, err
}

const unpublishPost = `-- name: UnpublishPost :exec
UPDATE posts
SET status = "draft", updated_at = CURRENT_TIMESTAMP, published_at = NULL
WHERE id = $1
`

func (q *Queries) UnpublishPost(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, unpublishPost, id)
	return err
}

const updatePost = `-- name: UpdatePost :one
UPDATE posts
SET title = $2, slug = $3, content = $4, excerpt = $5, author = $6, status = $7, tags = $8, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
RETURNING id, title, slug, content, excerpt, status, created_at, updated_at, tags
`

type UpdatePostParams struct {
	ID      uuid.UUID
	Title   string
	Slug    string
	Content string
	Excerpt sql.NullString
	Author  sql.NullString
	Status  sql.NullString
	Tags    []string
}

type UpdatePostRow struct {
	ID        uuid.UUID
	Title     string
	Slug      string
	Content   string
	Excerpt   sql.NullString
	Status    sql.NullString
	CreatedAt sql.NullTime
	UpdatedAt sql.NullTime
	Tags      []string
}

func (q *Queries) UpdatePost(ctx context.Context, arg UpdatePostParams) (UpdatePostRow, error) {
	row := q.db.QueryRowContext(ctx, updatePost,
		arg.ID,
		arg.Title,
		arg.Slug,
		arg.Content,
		arg.Excerpt,
		arg.Author,
		arg.Status,
		pq.Array(arg.Tags),
	)
	var i UpdatePostRow
	err := row.Scan(
		&i.ID,
		&i.Title,
		&i.Slug,
		&i.Content,
		&i.Excerpt,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		pq.Array(&i.Tags),
	)
	return i, err
}

const updatePostThumbnail = `-- name: UpdatePostThumbnail :exec
UPDATE posts
SET thumbnail = $2, updated_at = CURRENT_TIMESTAMP
WHERE id = $1
`

type UpdatePostThumbnailParams struct {
	ID        uuid.UUID
	Thumbnail sql.NullString
}

func (q *Queries) UpdatePostThumbnail(ctx context.Context, arg UpdatePostThumbnailParams) error {
	_, err := q.db.ExecContext(ctx, updatePostThumbnail, arg.ID, arg.Thumbnail)
	return err
}
